from ..core import ChepyCore
from typing import Any, List, Tuple, TypeVar

MultimediaT = TypeVar('MultimediaT', bound='Multimedia')

class Multimedia(ChepyCore):
    def __init__(self, *data: Any) -> None: ...
    state: Any = ...
    def resize_image(self: MultimediaT, width: int, height: int, extension: str=..., resample: str=..., quality: int=...) -> MultimediaT: ...
    def split_color_channels(self: MultimediaT, extension: str=...) -> MultimediaT: ...
    def rotate_image(self: MultimediaT, rotate_by: int, extension: str=...) -> MultimediaT: ...
    def blur_image(self: MultimediaT, extension: str=..., gaussian: bool=..., radius: int=...) -> MultimediaT: ...
    def grayscale_image(self: MultimediaT, extension: str=...) -> MultimediaT: ...
    def invert_image(self: MultimediaT, extension: str=...) -> MultimediaT: ...
    def image_opacity(self: MultimediaT, level: int, extension: str=...) -> MultimediaT: ...
    def image_contrast(self: MultimediaT, factor: int, extension: str=...) -> MultimediaT: ...
    def image_brightness(self: MultimediaT, factor: int, extension: str=...) -> MultimediaT: ...
    def image_sharpness(self: MultimediaT, factor: int, extension: str=...) -> MultimediaT: ...
    def image_color(self: MultimediaT, factor: int, extension: str=...) -> MultimediaT: ...
    def image_to_asciiart(self: MultimediaT, art_width: int=..., chars: List[str]=...) -> MultimediaT: ...
    def convert_image(self: MultimediaT, format_to: str) -> MultimediaT: ...
    def image_add_text(self: MultimediaT, text: str, extension: str=..., coordinates: Tuple[int, int]=..., color: Tuple[int, int, int]=...) -> MultimediaT: ...
    def lsb_dump_by_channel(self: MultimediaT, channel: str=..., column_first: bool=...) -> MultimediaT: ...
    def msb_dump_by_channel(self: MultimediaT, channel: str=..., column_first: bool=...) -> MultimediaT: ...
